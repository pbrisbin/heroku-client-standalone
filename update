#!/bin/sh
#
# pbrisbin 2014 - automatically check if there's a newer version of this package
# available. If so, modify the PKGBUILD and re-submit accordingly.
#
# License: WTFPL
#
###
set -e

latest="https://s3.amazonaws.com/assets.heroku.com/heroku-client/heroku-client.tgz"
version_rb='heroku-client/lib/heroku/version.rb'

get_latest_version() {
  {
    curl -# "$latest" | tar xzOf - "$version_rb"
    printf "puts Heroku::VERSION\n"
  } | ruby
}

submit_to_aur() {
  local src="heroku-client-standalone-$latest_version-1.src.tar.gz"

  mkaurball

  ( . .env && aur-submit "$src" )
}

current_version="$(sed '/^pkgver=\(.*\)$/!d; s//\1/g' PKGBUILD)"
latest_version="$(get_latest_version)"

printf "Current: %s\n" "$current_version"
printf "Latest:  %s\n" "$latest_version"

check="$(vercmp "$latest_version" "$current_version")"

if [ "$check" -gt 0 ]; then
  printf "Newer version available\n"
  printf "Updating PKGBUILD...\n"

  sed -i '/^md5sums=.*$/d
    s/^pkgver=.*$/pkgver='"$latest_version"'/
    s/^pkgrel=.*$/pkgrel=1/' PKGBUILD

  makepkg -c -g >> PKGBUILD

  printf "Committing...\n"
  git commit PKGBUILD -m "New version: $latest_version"
  git tag -s -m "v$latest_version" "v$latest_version"
  git show

  printf "Submitting in 3...\n"; sleep 1
  printf "              2...\n"; sleep 1
  printf "              1...\n"; sleep 1
  submit_to_aur

  printf "Cleaning up...\n"
  rm -v "heroku-client-$latest_version.tgz"
  rm -v "heroku-client-standalone-$latest_version-1.src.tar.gz"

  printf "Testing AUR installation...\n"
  aurget -S --noconfirm heroku-client-standalone
  heroku --version
fi
